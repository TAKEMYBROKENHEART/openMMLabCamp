2023/06/09 22:03:12 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.7.6 (default, Jan  8 2020, 19:59:22) [GCC 7.3.0]
    CUDA available: True
    numpy_random_seed: 865162846
    GPU 0: Tesla V100S-PCIE-32GB
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 10.1, V10.1.24
    GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
    PyTorch: 1.13.1+cu117
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1+cu117
    OpenCV: 4.2.0
    MMEngine: 0.7.4

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 865162846
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/09 22:03:14 - mmengine - INFO - Config:
default_scope = 'mmdet'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=5),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(
        type='CheckpointHook', interval=10, max_keep_ckpts=2,
        save_best='auto'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='DetVisualizationHook'))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='DetLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(type='LogProcessor', window_size=50, by_epoch=True)
log_level = 'INFO'
load_from = 'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/rtmdet_tiny_8xb32-300e_coco/rtmdet_tiny_8xb32-300e_coco_20220902_112414-78e30dcc.pth'
resume = False
train_cfg = dict(
    type='EpochBasedTrainLoop',
    max_epochs=100,
    val_interval=10,
    dynamic_intervals=[(280, 1)])
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
param_scheduler = [
    dict(type='LinearLR', start_factor=1e-05, by_epoch=False, begin=0, end=30),
    dict(
        type='CosineAnnealingLR',
        eta_min=7.500000000000001e-05,
        begin=50,
        end=100,
        T_max=50,
        by_epoch=True,
        convert_to_iter_based=True)
]
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='AdamW', lr=0.0015, weight_decay=0.05),
    paramwise_cfg=dict(
        norm_decay_mult=0, bias_decay_mult=0, bypass_duplicate=True))
auto_scale_lr = dict(enable=False, base_batch_size=16)
dataset_type = 'CocoDataset'
data_root = '/root/data/user/balloon_dataset/balloon/'
backend_args = None
train_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='CachedMosaic',
        img_scale=(640, 640),
        pad_val=114.0,
        max_cached_images=20,
        random_pop=False),
    dict(
        type='RandomResize',
        scale=(1280, 1280),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(640, 640)),
    dict(type='YOLOXHSVRandomAug'),
    dict(type='RandomFlip', prob=0.5),
    dict(type='Pad', size=(640, 640), pad_val=dict(img=(114, 114, 114))),
    dict(
        type='CachedMixUp',
        img_scale=(640, 640),
        ratio_range=(1.0, 1.0),
        max_cached_images=10,
        random_pop=False,
        pad_val=(114, 114, 114),
        prob=0.5),
    dict(type='PackDetInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='Resize', scale=(640, 640), keep_ratio=True),
    dict(type='Pad', size=(640, 640), pad_val=dict(img=(114, 114, 114))),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='PackDetInputs',
        meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                   'scale_factor'))
]
train_dataloader = dict(
    batch_size=12,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=True),
    batch_sampler=None,
    dataset=dict(
        type='CocoDataset',
        data_root='/root/data/user/balloon_dataset/balloon/',
        ann_file='train/coco_region_data.json',
        data_prefix=dict(img='train/'),
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='CachedMosaic',
                img_scale=(640, 640),
                pad_val=114.0,
                max_cached_images=20,
                random_pop=False),
            dict(
                type='RandomResize',
                scale=(1280, 1280),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(640, 640)),
            dict(type='YOLOXHSVRandomAug'),
            dict(type='RandomFlip', prob=0.5),
            dict(
                type='Pad', size=(640, 640), pad_val=dict(img=(114, 114,
                                                               114))),
            dict(
                type='CachedMixUp',
                img_scale=(640, 640),
                ratio_range=(1.0, 1.0),
                max_cached_images=10,
                random_pop=False,
                pad_val=(114, 114, 114),
                prob=0.5),
            dict(type='PackDetInputs')
        ],
        backend_args=None,
        metainfo=dict(classes=('balloon', ), palette=[(220, 20, 60)])),
    pin_memory=False)
val_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='/root/data/user/balloon_dataset/balloon/',
        ann_file='val/balloon_val.json',
        data_prefix=dict(img='val/'),
        test_mode=True,
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(640, 640), keep_ratio=True),
            dict(
                type='Pad', size=(640, 640), pad_val=dict(img=(114, 114,
                                                               114))),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        backend_args=None,
        metainfo=dict(classes=('balloon', ), palette=[(220, 20, 60)])))
test_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='/root/data/user/balloon_dataset/balloon/',
        ann_file='val/balloon_val.json',
        data_prefix=dict(img='val/'),
        test_mode=True,
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(640, 640), keep_ratio=True),
            dict(
                type='Pad', size=(640, 640), pad_val=dict(img=(114, 114,
                                                               114))),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        backend_args=None,
        metainfo=dict(classes=('balloon', ), palette=[(220, 20, 60)])))
val_evaluator = dict(
    type='CocoMetric',
    ann_file='/root/data/user/balloon_dataset/balloon/val/balloon_val.json',
    metric='bbox',
    format_only=False,
    backend_args=None,
    proposal_nums=(100, 1, 10))
test_evaluator = dict(
    type='CocoMetric',
    ann_file='/root/data/user/balloon_dataset/balloon/val/balloon_val.json',
    metric='bbox',
    format_only=False,
    backend_args=None,
    proposal_nums=(100, 1, 10))
tta_model = dict(
    type='DetTTAModel',
    tta_cfg=dict(nms=dict(type='nms', iou_threshold=0.6), max_per_img=100))
img_scales = [(640, 640), (320, 320), (960, 960)]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale': (640, 640),
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale': (320, 320),
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale': (960, 960),
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 1.0
                    }, {
                        'type': 'RandomFlip',
                        'prob': 0.0
                    }],
                    [{
                        'type': 'Pad',
                        'size': (960, 960),
                        'pad_val': {
                            'img': (114, 114, 114)
                        }
                    }], [{
                        'type': 'LoadAnnotations',
                        'with_bbox': True
                    }],
                    [{
                        'type':
                        'PackDetInputs',
                        'meta_keys':
                        ('img_id', 'img_path', 'ori_shape', 'img_shape',
                         'scale_factor', 'flip', 'flip_direction')
                    }]])
]
model = dict(
    type='RTMDet',
    data_preprocessor=dict(
        type='DetDataPreprocessor',
        mean=[103.53, 116.28, 123.675],
        std=[57.375, 57.12, 58.395],
        bgr_to_rgb=False,
        batch_augments=None),
    backbone=dict(
        type='CSPNeXt',
        arch='P5',
        expand_ratio=0.5,
        deepen_factor=0.167,
        widen_factor=0.375,
        channel_attention=True,
        norm_cfg=dict(type='SyncBN'),
        act_cfg=dict(type='SiLU', inplace=True),
        init_cfg=dict(
            type='Pretrained',
            prefix='backbone.',
            checkpoint=
            'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth'
        ),
        frozen_stages=4),
    neck=dict(
        type='CSPNeXtPAFPN',
        in_channels=[96, 192, 384],
        out_channels=96,
        num_csp_blocks=1,
        expand_ratio=0.5,
        norm_cfg=dict(type='SyncBN'),
        act_cfg=dict(type='SiLU', inplace=True)),
    bbox_head=dict(
        type='RTMDetSepBNHead',
        num_classes=1,
        in_channels=96,
        stacked_convs=2,
        feat_channels=96,
        anchor_generator=dict(
            type='MlvlPointGenerator', offset=0, strides=[8, 16, 32]),
        bbox_coder=dict(type='DistancePointBBoxCoder'),
        loss_cls=dict(
            type='QualityFocalLoss',
            use_sigmoid=True,
            beta=2.0,
            loss_weight=1.0),
        loss_bbox=dict(type='GIoULoss', loss_weight=2.0),
        with_objectness=False,
        exp_on_reg=False,
        share_conv=True,
        pred_kernel_size=1,
        norm_cfg=dict(type='SyncBN'),
        act_cfg=dict(type='SiLU', inplace=True)),
    train_cfg=dict(
        assigner=dict(type='DynamicSoftLabelAssigner', topk=13),
        allowed_border=-1,
        pos_weight=-1,
        debug=False),
    test_cfg=dict(
        nms_pre=30000,
        min_bbox_size=0,
        score_thr=0.001,
        nms=dict(type='nms', iou_threshold=0.65),
        max_per_img=300))
train_pipeline_stage2 = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='RandomResize',
        scale=(640, 640),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(640, 640)),
    dict(type='YOLOXHSVRandomAug'),
    dict(type='RandomFlip', prob=0.5),
    dict(type='Pad', size=(640, 640), pad_val=dict(img=(114, 114, 114))),
    dict(type='PackDetInputs')
]
max_epochs = 100
stage2_num_epochs = 20
base_lr = 0.0015
interval = 10
custom_hooks = [
    dict(
        type='EMAHook',
        ema_type='ExpMomentumEMA',
        momentum=0.0002,
        update_buffers=True,
        priority=49),
    dict(
        type='PipelineSwitchHook',
        switch_epoch=95,
        switch_pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='RandomResize',
                scale=(640, 640),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(640, 640)),
            dict(type='YOLOXHSVRandomAug'),
            dict(type='RandomFlip', prob=0.5),
            dict(
                type='Pad', size=(640, 640), pad_val=dict(img=(114, 114,
                                                               114))),
            dict(type='PackDetInputs')
        ])
]
checkpoint = 'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth'
metainfo = dict(classes=('balloon', ), palette=[(220, 20, 60)])
num_classes = 1
train_batch_size_per_gpu = 12
train_num_workers = 4
val_batch_size_per_gpu = 1
val_num_workers = 2
num_epochs_stage2 = 5
launcher = 'none'
work_dir = './work_dirs/rtmdet_tiny_1xb12-40e_ballon'

2023/06/09 22:03:56 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/09 22:03:56 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_load_checkpoint:
(49          ) EMAHook                            
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) PipelineSwitchHook                 
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_save_checkpoint:
(49          ) EMAHook                            
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stem.0.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stem.0.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stem.1.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stem.1.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stem.2.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stem.2.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage1.0.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage1.0.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage1.1.main_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage1.1.main_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage1.1.short_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage1.1.short_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage1.1.final_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage1.1.final_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage1.1.attention.fc.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage2.0.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage2.0.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage2.1.main_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage2.1.main_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage2.1.short_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage2.1.short_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage2.1.final_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage2.1.final_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage2.1.attention.fc.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage3.0.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage3.0.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage3.1.main_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage3.1.main_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage3.1.short_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage3.1.short_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage3.1.final_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage3.1.final_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage3.1.attention.fc.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage4.0.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage4.0.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv1.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv1.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv2.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv2.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage4.2.main_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage4.2.main_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage4.2.short_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage4.2.short_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage4.2.final_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage4.2.final_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- backbone.stage4.2.attention.fc.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.reduce_layers.0.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.reduce_layers.0.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.reduce_layers.1.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.reduce_layers.1.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.main_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.main_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.short_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.short_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.final_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.final_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.main_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.main_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.short_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.short_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.final_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.final_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.downsamples.0.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.downsamples.0.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.downsamples.1.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.downsamples.1.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.main_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.main_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.short_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.short_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.final_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.final_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.main_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.main_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.short_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.short_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.final_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.final_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.out_convs.0.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.out_convs.0.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.out_convs.1.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.out_convs.1.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.out_convs.2.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- neck.out_convs.2.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.0.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.0.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.1.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.1.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - WARNING - bbox_head.cls_convs.1.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.0.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.0.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - WARNING - bbox_head.cls_convs.1.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.1.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.1.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - WARNING - bbox_head.cls_convs.2.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.0.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.0.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - WARNING - bbox_head.cls_convs.2.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.1.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.1.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.0.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.0.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.1.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.1.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - WARNING - bbox_head.reg_convs.1.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.0.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.0.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - WARNING - bbox_head.reg_convs.1.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.1.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.1.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - WARNING - bbox_head.reg_convs.2.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.0.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.0.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - WARNING - bbox_head.reg_convs.2.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.1.bn.weight:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.1.bn.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.0.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.1.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.2.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.0.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.1.bias:weight_decay=0.0
2023/06/09 22:03:58 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.2.bias:weight_decay=0.0
2023/06/09 22:04:01 - mmengine - INFO - load backbone. in model from: https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth
Name of parameter - Initialization information

backbone.stem.0.conv.weight - torch.Size([12, 3, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.0.bn.weight - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.0.bn.bias - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.conv.weight - torch.Size([12, 12, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.bn.weight - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.bn.bias - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.conv.weight - torch.Size([24, 12, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.conv.weight - torch.Size([48, 24, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.conv.weight - torch.Size([24, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.conv.weight - torch.Size([24, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.conv.weight - torch.Size([24, 24, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([24, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([24, 24, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.attention.fc.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.attention.fc.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.conv.weight - torch.Size([96, 48, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.conv.weight - torch.Size([48, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.conv.weight - torch.Size([48, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.conv.weight - torch.Size([48, 48, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([48, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.attention.fc.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.attention.fc.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.conv.weight - torch.Size([192, 96, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.attention.fc.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.attention.fc.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.conv.weight - torch.Size([384, 192, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.conv.weight - torch.Size([384, 768, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.conv.weight - torch.Size([384, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([192, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.attention.fc.weight - torch.Size([384, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.attention.fc.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

neck.reduce_layers.0.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.1.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.main_conv.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.main_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.main_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.short_conv.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.short_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.short_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.final_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.final_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.main_conv.conv.weight - torch.Size([48, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.main_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.main_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.short_conv.conv.weight - torch.Size([48, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.short_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.short_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.final_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.final_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.final_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv1.conv.weight - torch.Size([48, 48, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv1.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv1.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([48, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.0.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.1.conv.weight - torch.Size([192, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.main_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.main_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.main_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.short_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.short_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.short_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.final_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.final_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.main_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.main_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.main_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.short_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.short_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.short_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.final_conv.conv.weight - torch.Size([384, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.final_conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.final_conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([192, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.0.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.1.conv.weight - torch.Size([96, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.2.conv.weight - torch.Size([96, 384, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.cls_convs.0.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.cls_convs.0.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.reg_convs.0.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.reg_convs.0.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.rtm_cls.0.weight - torch.Size([1, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.0.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.1.weight - torch.Size([1, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.1.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.2.weight - torch.Size([1, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.2.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.0.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.0.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.1.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.1.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.2.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.2.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  
2023/06/09 22:04:08 - mmengine - INFO - Load checkpoint from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/rtmdet_tiny_8xb32-300e_coco/rtmdet_tiny_8xb32-300e_coco_20220902_112414-78e30dcc.pth
2023/06/09 22:04:08 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/06/09 22:04:08 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/06/09 22:04:08 - mmengine - INFO - Checkpoints will be saved to /root/mmdetection/work_dirs/rtmdet_tiny_1xb12-40e_ballon.
2023/06/09 22:05:51 - mmengine - INFO - Epoch(train)   [1][5/6]  lr: 2.0691e-04  eta: 3:24:11  time: 20.5902  data_time: 1.0093  memory: 1623  loss: 2.7194  loss_cls: 2.0485  loss_bbox: 0.6709
2023/06/09 22:05:52 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:05:59 - mmengine - INFO - Epoch(train)   [2][5/6]  lr: 5.1725e-04  eta: 1:38:54  time: 10.0755  data_time: 0.7436  memory: 1623  loss: 2.7375  loss_cls: 2.0884  loss_bbox: 0.6491
2023/06/09 22:05:59 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:06:05 - mmengine - INFO - Epoch(train)   [3][5/6]  lr: 8.2759e-04  eta: 1:07:08  time: 6.9095  data_time: 0.6799  memory: 1623  loss: 2.7275  loss_cls: 2.1253  loss_bbox: 0.6022
2023/06/09 22:06:06 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:06:12 - mmengine - INFO - Epoch(train)   [4][5/6]  lr: 1.1379e-03  eta: 0:51:51  time: 5.3931  data_time: 0.6433  memory: 1623  loss: 2.5244  loss_cls: 1.9748  loss_bbox: 0.5496
2023/06/09 22:06:12 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:06:19 - mmengine - INFO - Epoch(train)   [5][5/6]  lr: 1.4483e-03  eta: 0:43:00  time: 4.5197  data_time: 0.6492  memory: 1623  loss: 2.2955  loss_cls: 1.7818  loss_bbox: 0.5137
2023/06/09 22:06:19 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:06:26 - mmengine - INFO - Epoch(train)   [6][5/6]  lr: 1.5000e-03  eta: 0:37:12  time: 3.9513  data_time: 0.6543  memory: 1623  loss: 2.0852  loss_cls: 1.6051  loss_bbox: 0.4801
2023/06/09 22:06:27 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:06:33 - mmengine - INFO - Epoch(train)   [7][5/6]  lr: 1.5000e-03  eta: 0:32:59  time: 3.5412  data_time: 0.6507  memory: 1623  loss: 1.9074  loss_cls: 1.4569  loss_bbox: 0.4505
2023/06/09 22:06:33 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:06:40 - mmengine - INFO - Epoch(train)   [8][5/6]  lr: 1.5000e-03  eta: 0:29:46  time: 3.2299  data_time: 0.6345  memory: 1623  loss: 1.7627  loss_cls: 1.3299  loss_bbox: 0.4329
2023/06/09 22:06:40 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:06:46 - mmengine - INFO - Epoch(train)   [9][5/6]  lr: 1.5000e-03  eta: 0:27:13  time: 1.1277  data_time: 0.5607  memory: 1623  loss: 1.5852  loss_cls: 1.1820  loss_bbox: 0.4032
2023/06/09 22:06:47 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:06:53 - mmengine - INFO - Epoch(train)  [10][5/6]  lr: 1.5000e-03  eta: 0:25:15  time: 1.1099  data_time: 0.5630  memory: 1623  loss: 1.3500  loss_cls: 0.9928  loss_bbox: 0.3572
2023/06/09 22:06:54 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:06:54 - mmengine - INFO - Saving checkpoint at 10 epochs
2023/06/09 22:07:00 - mmengine - INFO - Epoch(val)  [10][ 5/13]    eta: 0:00:05  time: 0.7018  data_time: 0.3689  memory: 318  
2023/06/09 22:07:01 - mmengine - INFO - Epoch(val)  [10][10/13]    eta: 0:00:01  time: 0.5015  data_time: 0.1858  memory: 105  
2023/06/09 22:07:02 - mmengine - INFO - Evaluating bbox...
2023/06/09 22:07:03 - mmengine - INFO - bbox_mAP_copypaste: 0.652 0.796 0.739 0.000 0.418 0.760
2023/06/09 22:07:03 - mmengine - INFO - Epoch(val) [10][13/13]    coco/bbox_mAP: 0.6520  coco/bbox_mAP_50: 0.7960  coco/bbox_mAP_75: 0.7390  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4180  coco/bbox_mAP_l: 0.7600  data_time: 0.1434  time: 0.4539
2023/06/09 22:07:05 - mmengine - INFO - The best checkpoint with 0.6520 coco/bbox_mAP at 10 epoch is saved to best_coco_bbox_mAP_epoch_10.pth.
2023/06/09 22:07:14 - mmengine - INFO - Epoch(train)  [11][5/6]  lr: 1.5000e-03  eta: 0:23:35  time: 1.1201  data_time: 0.5688  memory: 1623  loss: 1.1038  loss_cls: 0.7796  loss_bbox: 0.3242
2023/06/09 22:07:14 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:07:21 - mmengine - INFO - Epoch(train)  [12][5/6]  lr: 1.5000e-03  eta: 0:22:12  time: 1.1152  data_time: 0.5623  memory: 1623  loss: 0.9057  loss_cls: 0.6015  loss_bbox: 0.3041
2023/06/09 22:07:21 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:07:27 - mmengine - INFO - Epoch(train)  [13][5/6]  lr: 1.5000e-03  eta: 0:20:58  time: 1.1093  data_time: 0.5523  memory: 1623  loss: 0.8203  loss_cls: 0.5264  loss_bbox: 0.2939
2023/06/09 22:07:28 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:07:34 - mmengine - INFO - Epoch(train)  [14][5/6]  lr: 1.5000e-03  eta: 0:19:57  time: 1.1143  data_time: 0.5617  memory: 1623  loss: 0.7614  loss_cls: 0.4760  loss_bbox: 0.2854
2023/06/09 22:07:35 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:07:41 - mmengine - INFO - Epoch(train)  [15][5/6]  lr: 1.5000e-03  eta: 0:19:01  time: 1.0991  data_time: 0.5470  memory: 1623  loss: 0.7612  loss_cls: 0.4765  loss_bbox: 0.2847
2023/06/09 22:07:41 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:07:47 - mmengine - INFO - Epoch(train)  [16][5/6]  lr: 1.5000e-03  eta: 0:18:11  time: 1.0972  data_time: 0.5466  memory: 1623  loss: 0.7438  loss_cls: 0.4631  loss_bbox: 0.2808
2023/06/09 22:07:48 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:07:54 - mmengine - INFO - Epoch(train)  [17][5/6]  lr: 1.5000e-03  eta: 0:17:27  time: 1.0975  data_time: 0.5513  memory: 1623  loss: 0.7439  loss_cls: 0.4662  loss_bbox: 0.2777
2023/06/09 22:07:54 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:08:01 - mmengine - INFO - Epoch(train)  [18][5/6]  lr: 1.5000e-03  eta: 0:16:48  time: 1.0970  data_time: 0.5494  memory: 1623  loss: 0.7285  loss_cls: 0.4548  loss_bbox: 0.2737
2023/06/09 22:08:01 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:08:08 - mmengine - INFO - Epoch(train)  [19][5/6]  lr: 1.5000e-03  eta: 0:16:15  time: 1.1110  data_time: 0.5593  memory: 1623  loss: 0.7149  loss_cls: 0.4403  loss_bbox: 0.2746
2023/06/09 22:08:08 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:08:14 - mmengine - INFO - Epoch(train)  [20][5/6]  lr: 1.5000e-03  eta: 0:15:40  time: 1.0951  data_time: 0.5540  memory: 1623  loss: 0.7010  loss_cls: 0.4284  loss_bbox: 0.2726
2023/06/09 22:08:15 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:08:15 - mmengine - INFO - Saving checkpoint at 20 epochs
2023/06/09 22:08:19 - mmengine - INFO - Epoch(val)  [20][ 5/13]    eta: 0:00:02  time: 0.4144  data_time: 0.1088  memory: 318  
2023/06/09 22:08:21 - mmengine - INFO - Epoch(val)  [20][10/13]    eta: 0:00:00  time: 0.3932  data_time: 0.0858  memory: 105  
2023/06/09 22:08:22 - mmengine - INFO - Evaluating bbox...
2023/06/09 22:08:22 - mmengine - INFO - bbox_mAP_copypaste: 0.684 0.862 0.799 0.000 0.428 0.796
2023/06/09 22:08:22 - mmengine - INFO - Epoch(val) [20][13/13]    coco/bbox_mAP: 0.6840  coco/bbox_mAP_50: 0.8620  coco/bbox_mAP_75: 0.7990  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4280  coco/bbox_mAP_l: 0.7960  data_time: 0.0141  time: 0.3094
2023/06/09 22:08:22 - mmengine - INFO - The previous best checkpoint /root/mmdetection/work_dirs/rtmdet_tiny_1xb12-40e_ballon/best_coco_bbox_mAP_epoch_10.pth is removed
2023/06/09 22:08:24 - mmengine - INFO - The best checkpoint with 0.6840 coco/bbox_mAP at 20 epoch is saved to best_coco_bbox_mAP_epoch_20.pth.
2023/06/09 22:08:34 - mmengine - INFO - Epoch(train)  [21][5/6]  lr: 1.5000e-03  eta: 0:15:12  time: 1.1244  data_time: 0.5781  memory: 1623  loss: 0.7371  loss_cls: 0.4619  loss_bbox: 0.2751
2023/06/09 22:08:34 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:08:40 - mmengine - INFO - Epoch(train)  [22][5/6]  lr: 1.5000e-03  eta: 0:14:42  time: 1.1087  data_time: 0.5616  memory: 1623  loss: 0.7405  loss_cls: 0.4645  loss_bbox: 0.2760
2023/06/09 22:08:41 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:08:48 - mmengine - INFO - Epoch(train)  [23][5/6]  lr: 1.5000e-03  eta: 0:14:16  time: 1.1195  data_time: 0.5661  memory: 1623  loss: 0.7276  loss_cls: 0.4449  loss_bbox: 0.2827
2023/06/09 22:08:48 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:08:55 - mmengine - INFO - Epoch(train)  [24][5/6]  lr: 1.5000e-03  eta: 0:13:52  time: 1.1236  data_time: 0.5697  memory: 1623  loss: 0.7218  loss_cls: 0.4399  loss_bbox: 0.2819
2023/06/09 22:08:55 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:09:01 - mmengine - INFO - Epoch(train)  [25][5/6]  lr: 1.5000e-03  eta: 0:13:29  time: 1.1323  data_time: 0.5729  memory: 1623  loss: 0.7112  loss_cls: 0.4287  loss_bbox: 0.2825
2023/06/09 22:09:02 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:09:08 - mmengine - INFO - Epoch(train)  [26][5/6]  lr: 1.5000e-03  eta: 0:13:06  time: 1.1215  data_time: 0.5691  memory: 1623  loss: 0.6965  loss_cls: 0.4169  loss_bbox: 0.2796
2023/06/09 22:09:08 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:09:15 - mmengine - INFO - Epoch(train)  [27][5/6]  lr: 1.5000e-03  eta: 0:12:44  time: 1.1134  data_time: 0.5609  memory: 1623  loss: 0.6949  loss_cls: 0.4160  loss_bbox: 0.2790
2023/06/09 22:09:15 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:09:21 - mmengine - INFO - Epoch(train)  [28][5/6]  lr: 1.5000e-03  eta: 0:12:24  time: 1.1125  data_time: 0.5585  memory: 1623  loss: 0.7119  loss_cls: 0.4321  loss_bbox: 0.2798
2023/06/09 22:09:22 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:09:28 - mmengine - INFO - Epoch(train)  [29][5/6]  lr: 1.5000e-03  eta: 0:12:05  time: 1.1100  data_time: 0.5475  memory: 1623  loss: 0.6910  loss_cls: 0.4089  loss_bbox: 0.2821
2023/06/09 22:09:28 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:09:34 - mmengine - INFO - Epoch(train)  [30][5/6]  lr: 1.5000e-03  eta: 0:11:46  time: 1.0976  data_time: 0.5340  memory: 1623  loss: 0.6867  loss_cls: 0.4039  loss_bbox: 0.2828
2023/06/09 22:09:35 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:09:35 - mmengine - INFO - Saving checkpoint at 30 epochs
2023/06/09 22:09:39 - mmengine - INFO - Epoch(val)  [30][ 5/13]    eta: 0:00:02  time: 0.3795  data_time: 0.0753  memory: 318  
2023/06/09 22:09:41 - mmengine - INFO - Epoch(val)  [30][10/13]    eta: 0:00:00  time: 0.3684  data_time: 0.0652  memory: 105  
2023/06/09 22:09:42 - mmengine - INFO - Evaluating bbox...
2023/06/09 22:09:42 - mmengine - INFO - bbox_mAP_copypaste: 0.645 0.873 0.752 0.000 0.407 0.779
2023/06/09 22:09:42 - mmengine - INFO - Epoch(val) [30][13/13]    coco/bbox_mAP: 0.6450  coco/bbox_mAP_50: 0.8730  coco/bbox_mAP_75: 0.7520  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4070  coco/bbox_mAP_l: 0.7790  data_time: 0.0211  time: 0.3227
2023/06/09 22:09:49 - mmengine - INFO - Epoch(train)  [31][5/6]  lr: 1.5000e-03  eta: 0:11:29  time: 1.0924  data_time: 0.5323  memory: 1623  loss: 0.6824  loss_cls: 0.4034  loss_bbox: 0.2790
2023/06/09 22:09:49 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:09:55 - mmengine - INFO - Epoch(train)  [32][5/6]  lr: 1.5000e-03  eta: 0:11:12  time: 1.1000  data_time: 0.5347  memory: 1623  loss: 0.6763  loss_cls: 0.3994  loss_bbox: 0.2768
2023/06/09 22:09:56 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:10:02 - mmengine - INFO - Epoch(train)  [33][5/6]  lr: 1.5000e-03  eta: 0:10:55  time: 1.0828  data_time: 0.5216  memory: 1623  loss: 0.6843  loss_cls: 0.4013  loss_bbox: 0.2830
2023/06/09 22:10:02 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:10:09 - mmengine - INFO - Epoch(train)  [34][5/6]  lr: 1.5000e-03  eta: 0:10:40  time: 1.1002  data_time: 0.5339  memory: 1623  loss: 0.6838  loss_cls: 0.4005  loss_bbox: 0.2832
2023/06/09 22:10:09 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:10:15 - mmengine - INFO - Epoch(train)  [35][5/6]  lr: 1.5000e-03  eta: 0:10:24  time: 1.0940  data_time: 0.5419  memory: 1623  loss: 0.6876  loss_cls: 0.4002  loss_bbox: 0.2875
2023/06/09 22:10:16 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:10:23 - mmengine - INFO - Epoch(train)  [36][5/6]  lr: 1.5000e-03  eta: 0:10:10  time: 1.1030  data_time: 0.5527  memory: 1623  loss: 0.6745  loss_cls: 0.3885  loss_bbox: 0.2860
2023/06/09 22:10:23 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:10:29 - mmengine - INFO - Epoch(train)  [37][5/6]  lr: 1.5000e-03  eta: 0:09:55  time: 1.0905  data_time: 0.5496  memory: 1623  loss: 0.6348  loss_cls: 0.3575  loss_bbox: 0.2773
2023/06/09 22:10:29 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:10:36 - mmengine - INFO - Epoch(train)  [38][5/6]  lr: 1.5000e-03  eta: 0:09:42  time: 1.1022  data_time: 0.5642  memory: 1623  loss: 0.6252  loss_cls: 0.3499  loss_bbox: 0.2753
2023/06/09 22:10:36 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:10:42 - mmengine - INFO - Epoch(train)  [39][5/6]  lr: 1.5000e-03  eta: 0:09:28  time: 1.0893  data_time: 0.5574  memory: 1623  loss: 0.6118  loss_cls: 0.3371  loss_bbox: 0.2747
2023/06/09 22:10:42 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:10:48 - mmengine - INFO - Epoch(train)  [40][5/6]  lr: 1.5000e-03  eta: 0:09:14  time: 1.0850  data_time: 0.5618  memory: 1623  loss: 0.6580  loss_cls: 0.3785  loss_bbox: 0.2795
2023/06/09 22:10:49 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:10:49 - mmengine - INFO - Saving checkpoint at 40 epochs
2023/06/09 22:10:54 - mmengine - INFO - Epoch(val)  [40][ 5/13]    eta: 0:00:03  time: 0.3661  data_time: 0.0558  memory: 318  
2023/06/09 22:10:55 - mmengine - INFO - Epoch(val)  [40][10/13]    eta: 0:00:01  time: 0.3600  data_time: 0.0505  memory: 105  
2023/06/09 22:10:56 - mmengine - INFO - Evaluating bbox...
2023/06/09 22:10:56 - mmengine - INFO - bbox_mAP_copypaste: 0.712 0.868 0.852 0.000 0.449 0.837
2023/06/09 22:10:56 - mmengine - INFO - Epoch(val) [40][13/13]    coco/bbox_mAP: 0.7120  coco/bbox_mAP_50: 0.8680  coco/bbox_mAP_75: 0.8520  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4490  coco/bbox_mAP_l: 0.8370  data_time: 0.0092  time: 0.3349
2023/06/09 22:10:56 - mmengine - INFO - The previous best checkpoint /root/mmdetection/work_dirs/rtmdet_tiny_1xb12-40e_ballon/best_coco_bbox_mAP_epoch_20.pth is removed
2023/06/09 22:10:59 - mmengine - INFO - The best checkpoint with 0.7120 coco/bbox_mAP at 40 epoch is saved to best_coco_bbox_mAP_epoch_40.pth.
2023/06/09 22:11:07 - mmengine - INFO - Epoch(train)  [41][5/6]  lr: 1.5000e-03  eta: 0:09:00  time: 1.0840  data_time: 0.5601  memory: 1623  loss: 0.6356  loss_cls: 0.3658  loss_bbox: 0.2698
2023/06/09 22:11:08 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:11:14 - mmengine - INFO - Epoch(train)  [42][5/6]  lr: 1.5000e-03  eta: 0:08:48  time: 1.0828  data_time: 0.5648  memory: 1623  loss: 0.6369  loss_cls: 0.3663  loss_bbox: 0.2707
2023/06/09 22:11:14 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:11:21 - mmengine - INFO - Epoch(train)  [43][5/6]  lr: 1.5000e-03  eta: 0:08:36  time: 1.0904  data_time: 0.5553  memory: 1623  loss: 0.6190  loss_cls: 0.3539  loss_bbox: 0.2651
2023/06/09 22:11:21 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:11:28 - mmengine - INFO - Epoch(train)  [44][5/6]  lr: 1.5000e-03  eta: 0:08:24  time: 1.0803  data_time: 0.5333  memory: 1623  loss: 0.6119  loss_cls: 0.3495  loss_bbox: 0.2624
2023/06/09 22:11:28 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:11:35 - mmengine - INFO - Epoch(train)  [45][5/6]  lr: 1.5000e-03  eta: 0:08:13  time: 1.0886  data_time: 0.5350  memory: 1623  loss: 0.6258  loss_cls: 0.3591  loss_bbox: 0.2668
2023/06/09 22:11:35 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:11:42 - mmengine - INFO - Epoch(train)  [46][5/6]  lr: 1.5000e-03  eta: 0:08:02  time: 1.1042  data_time: 0.5431  memory: 1623  loss: 0.6200  loss_cls: 0.3562  loss_bbox: 0.2638
2023/06/09 22:11:42 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:11:49 - mmengine - INFO - Epoch(train)  [47][5/6]  lr: 1.5000e-03  eta: 0:07:50  time: 1.1072  data_time: 0.5454  memory: 1623  loss: 0.6197  loss_cls: 0.3603  loss_bbox: 0.2594
2023/06/09 22:11:49 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:11:56 - mmengine - INFO - Epoch(train)  [48][5/6]  lr: 1.5000e-03  eta: 0:07:39  time: 1.1197  data_time: 0.5376  memory: 1623  loss: 0.5615  loss_cls: 0.3109  loss_bbox: 0.2506
2023/06/09 22:11:56 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:12:03 - mmengine - INFO - Epoch(train)  [49][5/6]  lr: 1.5000e-03  eta: 0:07:29  time: 1.1290  data_time: 0.5425  memory: 1623  loss: 0.5520  loss_cls: 0.3023  loss_bbox: 0.2497
2023/06/09 22:12:03 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:12:09 - mmengine - INFO - Epoch(train)  [50][5/6]  lr: 1.5000e-03  eta: 0:07:18  time: 1.1382  data_time: 0.5371  memory: 1623  loss: 0.5445  loss_cls: 0.2992  loss_bbox: 0.2453
2023/06/09 22:12:10 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:12:10 - mmengine - INFO - Saving checkpoint at 50 epochs
2023/06/09 22:12:15 - mmengine - INFO - Epoch(val)  [50][ 5/13]    eta: 0:00:02  time: 0.3248  data_time: 0.0163  memory: 318  
2023/06/09 22:12:16 - mmengine - INFO - Epoch(val)  [50][10/13]    eta: 0:00:00  time: 0.3245  data_time: 0.0163  memory: 105  
2023/06/09 22:12:17 - mmengine - INFO - Evaluating bbox...
2023/06/09 22:12:17 - mmengine - INFO - bbox_mAP_copypaste: 0.713 0.865 0.832 0.000 0.475 0.817
2023/06/09 22:12:17 - mmengine - INFO - Epoch(val) [50][13/13]    coco/bbox_mAP: 0.7130  coco/bbox_mAP_50: 0.8650  coco/bbox_mAP_75: 0.8320  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4750  coco/bbox_mAP_l: 0.8170  data_time: 0.0147  time: 0.3214
2023/06/09 22:12:17 - mmengine - INFO - The previous best checkpoint /root/mmdetection/work_dirs/rtmdet_tiny_1xb12-40e_ballon/best_coco_bbox_mAP_epoch_40.pth is removed
2023/06/09 22:12:20 - mmengine - INFO - The best checkpoint with 0.7130 coco/bbox_mAP at 50 epoch is saved to best_coco_bbox_mAP_epoch_50.pth.
2023/06/09 22:12:30 - mmengine - INFO - Epoch(train)  [51][5/6]  lr: 1.4994e-03  eta: 0:07:07  time: 1.1425  data_time: 0.5618  memory: 1623  loss: 0.5495  loss_cls: 0.3030  loss_bbox: 0.2466
2023/06/09 22:12:30 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:12:36 - mmengine - INFO - Epoch(train)  [52][5/6]  lr: 1.4961e-03  eta: 0:06:57  time: 1.1201  data_time: 0.5487  memory: 1623  loss: 0.5537  loss_cls: 0.3050  loss_bbox: 0.2487
2023/06/09 22:12:37 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:12:43 - mmengine - INFO - Epoch(train)  [53][5/6]  lr: 1.4900e-03  eta: 0:06:46  time: 1.1290  data_time: 0.5560  memory: 1623  loss: 0.5407  loss_cls: 0.2958  loss_bbox: 0.2449
2023/06/09 22:12:43 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:12:50 - mmengine - INFO - Epoch(train)  [54][5/6]  lr: 1.4812e-03  eta: 0:06:36  time: 1.1184  data_time: 0.5459  memory: 1623  loss: 0.5411  loss_cls: 0.2944  loss_bbox: 0.2467
2023/06/09 22:12:50 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:12:57 - mmengine - INFO - Epoch(train)  [55][5/6]  lr: 1.4696e-03  eta: 0:06:26  time: 1.1152  data_time: 0.5430  memory: 1623  loss: 0.5294  loss_cls: 0.2856  loss_bbox: 0.2438
2023/06/09 22:12:57 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:13:04 - mmengine - INFO - Epoch(train)  [56][5/6]  lr: 1.4553e-03  eta: 0:06:16  time: 1.1187  data_time: 0.5466  memory: 1623  loss: 0.5368  loss_cls: 0.2915  loss_bbox: 0.2453
2023/06/09 22:13:04 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:13:10 - mmengine - INFO - Epoch(train)  [57][5/6]  lr: 1.4384e-03  eta: 0:06:06  time: 1.1205  data_time: 0.5519  memory: 1623  loss: 0.5295  loss_cls: 0.2866  loss_bbox: 0.2429
2023/06/09 22:13:11 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:13:17 - mmengine - INFO - Epoch(train)  [58][5/6]  lr: 1.4189e-03  eta: 0:05:57  time: 1.1160  data_time: 0.5516  memory: 1623  loss: 0.5235  loss_cls: 0.2814  loss_bbox: 0.2421
2023/06/09 22:13:18 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:13:24 - mmengine - INFO - Epoch(train)  [59][5/6]  lr: 1.3969e-03  eta: 0:05:47  time: 1.1258  data_time: 0.5586  memory: 1623  loss: 0.5163  loss_cls: 0.2750  loss_bbox: 0.2413
2023/06/09 22:13:25 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:13:31 - mmengine - INFO - Epoch(train)  [60][5/6]  lr: 1.3726e-03  eta: 0:05:38  time: 1.1191  data_time: 0.5553  memory: 1623  loss: 0.5490  loss_cls: 0.3003  loss_bbox: 0.2487
2023/06/09 22:13:32 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:13:32 - mmengine - INFO - Saving checkpoint at 60 epochs
2023/06/09 22:13:36 - mmengine - INFO - Epoch(val)  [60][ 5/13]    eta: 0:00:02  time: 0.3258  data_time: 0.0161  memory: 318  
2023/06/09 22:13:38 - mmengine - INFO - Epoch(val)  [60][10/13]    eta: 0:00:00  time: 0.3258  data_time: 0.0144  memory: 105  
2023/06/09 22:13:39 - mmengine - INFO - Evaluating bbox...
2023/06/09 22:13:39 - mmengine - INFO - bbox_mAP_copypaste: 0.680 0.838 0.808 0.000 0.447 0.791
2023/06/09 22:13:39 - mmengine - INFO - Epoch(val) [60][13/13]    coco/bbox_mAP: 0.6800  coco/bbox_mAP_50: 0.8380  coco/bbox_mAP_75: 0.8080  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4470  coco/bbox_mAP_l: 0.7910  data_time: 0.0117  time: 0.3211
2023/06/09 22:13:46 - mmengine - INFO - Epoch(train)  [61][5/6]  lr: 1.3459e-03  eta: 0:05:28  time: 1.1145  data_time: 0.5532  memory: 1623  loss: 0.5561  loss_cls: 0.3051  loss_bbox: 0.2510
2023/06/09 22:13:46 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:13:52 - mmengine - INFO - Epoch(train)  [62][5/6]  lr: 1.3170e-03  eta: 0:05:19  time: 1.1164  data_time: 0.5540  memory: 1623  loss: 0.5559  loss_cls: 0.3104  loss_bbox: 0.2455
2023/06/09 22:13:53 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:13:59 - mmengine - INFO - Epoch(train)  [63][5/6]  lr: 1.2860e-03  eta: 0:05:09  time: 1.1165  data_time: 0.5592  memory: 1623  loss: 0.5722  loss_cls: 0.3226  loss_bbox: 0.2496
2023/06/09 22:13:59 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:14:06 - mmengine - INFO - Epoch(train)  [64][5/6]  lr: 1.2531e-03  eta: 0:05:00  time: 1.1051  data_time: 0.5492  memory: 1623  loss: 0.5768  loss_cls: 0.3255  loss_bbox: 0.2513
2023/06/09 22:14:06 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:14:13 - mmengine - INFO - Epoch(train)  [65][5/6]  lr: 1.2183e-03  eta: 0:04:51  time: 1.1187  data_time: 0.5517  memory: 1623  loss: 0.5893  loss_cls: 0.3356  loss_bbox: 0.2538
2023/06/09 22:14:14 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:14:21 - mmengine - INFO - Epoch(train)  [66][5/6]  lr: 1.1818e-03  eta: 0:04:43  time: 1.1319  data_time: 0.5683  memory: 1623  loss: 0.6038  loss_cls: 0.3468  loss_bbox: 0.2570
2023/06/09 22:14:21 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:14:28 - mmengine - INFO - Epoch(train)  [67][5/6]  lr: 1.1437e-03  eta: 0:04:34  time: 1.1330  data_time: 0.5756  memory: 1623  loss: 0.6025  loss_cls: 0.3450  loss_bbox: 0.2575
2023/06/09 22:14:28 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:14:35 - mmengine - INFO - Epoch(train)  [68][5/6]  lr: 1.1043e-03  eta: 0:04:25  time: 1.1293  data_time: 0.5601  memory: 1623  loss: 0.5839  loss_cls: 0.3339  loss_bbox: 0.2500
2023/06/09 22:14:35 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:14:42 - mmengine - INFO - Epoch(train)  [69][5/6]  lr: 1.0636e-03  eta: 0:04:16  time: 1.1456  data_time: 0.5866  memory: 1623  loss: 0.5516  loss_cls: 0.3103  loss_bbox: 0.2413
2023/06/09 22:14:42 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:14:49 - mmengine - INFO - Epoch(train)  [70][5/6]  lr: 1.0218e-03  eta: 0:04:07  time: 1.1566  data_time: 0.6001  memory: 1623  loss: 0.5531  loss_cls: 0.3081  loss_bbox: 0.2449
2023/06/09 22:14:50 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:14:50 - mmengine - INFO - Saving checkpoint at 70 epochs
2023/06/09 22:14:54 - mmengine - INFO - Epoch(val)  [70][ 5/13]    eta: 0:00:02  time: 0.3281  data_time: 0.0121  memory: 318  
2023/06/09 22:14:56 - mmengine - INFO - Epoch(val)  [70][10/13]    eta: 0:00:01  time: 0.3291  data_time: 0.0122  memory: 105  
2023/06/09 22:14:57 - mmengine - INFO - Evaluating bbox...
2023/06/09 22:14:57 - mmengine - INFO - bbox_mAP_copypaste: 0.698 0.861 0.785 0.000 0.396 0.817
2023/06/09 22:14:57 - mmengine - INFO - Epoch(val) [70][13/13]    coco/bbox_mAP: 0.6980  coco/bbox_mAP_50: 0.8610  coco/bbox_mAP_75: 0.7850  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.3960  coco/bbox_mAP_l: 0.8170  data_time: 0.0101  time: 0.3255
2023/06/09 22:15:03 - mmengine - INFO - Epoch(train)  [71][5/6]  lr: 9.7911e-04  eta: 0:03:59  time: 1.1600  data_time: 0.6058  memory: 1623  loss: 0.5363  loss_cls: 0.2958  loss_bbox: 0.2405
2023/06/09 22:15:04 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:15:10 - mmengine - INFO - Epoch(train)  [72][5/6]  lr: 9.3564e-04  eta: 0:03:50  time: 1.1640  data_time: 0.6086  memory: 1623  loss: 0.5768  loss_cls: 0.3299  loss_bbox: 0.2469
2023/06/09 22:15:11 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:15:17 - mmengine - INFO - Epoch(train)  [73][5/6]  lr: 8.9158e-04  eta: 0:03:41  time: 1.1570  data_time: 0.6078  memory: 1623  loss: 0.5826  loss_cls: 0.3341  loss_bbox: 0.2486
2023/06/09 22:15:17 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:15:24 - mmengine - INFO - Epoch(train)  [74][5/6]  lr: 8.4712e-04  eta: 0:03:32  time: 1.1336  data_time: 0.5905  memory: 1623  loss: 0.5729  loss_cls: 0.3289  loss_bbox: 0.2440
2023/06/09 22:15:24 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:15:31 - mmengine - INFO - Epoch(train)  [75][5/6]  lr: 8.0242e-04  eta: 0:03:24  time: 1.1310  data_time: 0.5777  memory: 1623  loss: 0.5702  loss_cls: 0.3258  loss_bbox: 0.2444
2023/06/09 22:15:31 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:15:38 - mmengine - INFO - Epoch(train)  [76][5/6]  lr: 7.5766e-04  eta: 0:03:15  time: 1.1353  data_time: 0.5967  memory: 1623  loss: 0.5614  loss_cls: 0.3174  loss_bbox: 0.2441
2023/06/09 22:15:38 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:15:45 - mmengine - INFO - Epoch(train)  [77][5/6]  lr: 7.1302e-04  eta: 0:03:07  time: 1.1313  data_time: 0.5814  memory: 1623  loss: 0.5651  loss_cls: 0.3199  loss_bbox: 0.2453
2023/06/09 22:15:45 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:15:51 - mmengine - INFO - Epoch(train)  [78][5/6]  lr: 6.6868e-04  eta: 0:02:58  time: 1.1263  data_time: 0.5786  memory: 1623  loss: 0.5497  loss_cls: 0.3105  loss_bbox: 0.2391
2023/06/09 22:15:52 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:15:58 - mmengine - INFO - Epoch(train)  [79][5/6]  lr: 6.2480e-04  eta: 0:02:50  time: 1.1201  data_time: 0.5736  memory: 1623  loss: 0.5560  loss_cls: 0.3133  loss_bbox: 0.2427
2023/06/09 22:15:59 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:16:05 - mmengine - INFO - Epoch(train)  [80][5/6]  lr: 5.8156e-04  eta: 0:02:42  time: 1.1149  data_time: 0.5774  memory: 1623  loss: 0.5068  loss_cls: 0.2735  loss_bbox: 0.2332
2023/06/09 22:16:05 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:16:05 - mmengine - INFO - Saving checkpoint at 80 epochs
2023/06/09 22:16:11 - mmengine - INFO - Epoch(val)  [80][ 5/13]    eta: 0:00:02  time: 0.3234  data_time: 0.0133  memory: 318  
2023/06/09 22:16:12 - mmengine - INFO - Epoch(val)  [80][10/13]    eta: 0:00:00  time: 0.3235  data_time: 0.0132  memory: 105  
2023/06/09 22:16:13 - mmengine - INFO - Evaluating bbox...
2023/06/09 22:16:13 - mmengine - INFO - bbox_mAP_copypaste: 0.711 0.857 0.796 0.000 0.394 0.841
2023/06/09 22:16:13 - mmengine - INFO - Epoch(val) [80][13/13]    coco/bbox_mAP: 0.7110  coco/bbox_mAP_50: 0.8570  coco/bbox_mAP_75: 0.7960  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.3940  coco/bbox_mAP_l: 0.8410  data_time: 0.0119  time: 0.3142
2023/06/09 22:16:20 - mmengine - INFO - Epoch(train)  [81][5/6]  lr: 5.3914e-04  eta: 0:02:33  time: 1.1240  data_time: 0.5838  memory: 1623  loss: 0.4955  loss_cls: 0.2647  loss_bbox: 0.2308
2023/06/09 22:16:21 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:16:27 - mmengine - INFO - Epoch(train)  [82][5/6]  lr: 4.9770e-04  eta: 0:02:25  time: 1.1209  data_time: 0.5862  memory: 1623  loss: 0.4789  loss_cls: 0.2522  loss_bbox: 0.2267
2023/06/09 22:16:27 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:16:34 - mmengine - INFO - Epoch(train)  [83][5/6]  lr: 4.5740e-04  eta: 0:02:17  time: 1.1289  data_time: 0.6056  memory: 1623  loss: 0.4975  loss_cls: 0.2662  loss_bbox: 0.2312
2023/06/09 22:16:35 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:16:41 - mmengine - INFO - Epoch(train)  [84][5/6]  lr: 4.1841e-04  eta: 0:02:09  time: 1.1363  data_time: 0.6057  memory: 1623  loss: 0.4915  loss_cls: 0.2610  loss_bbox: 0.2305
2023/06/09 22:16:42 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:16:48 - mmengine - INFO - Epoch(train)  [85][5/6]  lr: 3.8087e-04  eta: 0:02:00  time: 1.1199  data_time: 0.5910  memory: 1623  loss: 0.4915  loss_cls: 0.2605  loss_bbox: 0.2310
2023/06/09 22:16:48 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:16:54 - mmengine - INFO - Epoch(train)  [86][5/6]  lr: 3.4493e-04  eta: 0:01:52  time: 1.1210  data_time: 0.5877  memory: 1623  loss: 0.5036  loss_cls: 0.2688  loss_bbox: 0.2348
2023/06/09 22:16:55 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:17:01 - mmengine - INFO - Epoch(train)  [87][5/6]  lr: 3.1074e-04  eta: 0:01:44  time: 1.1175  data_time: 0.5850  memory: 1623  loss: 0.4948  loss_cls: 0.2663  loss_bbox: 0.2285
2023/06/09 22:17:02 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:17:08 - mmengine - INFO - Epoch(train)  [88][5/6]  lr: 2.7844e-04  eta: 0:01:36  time: 1.1218  data_time: 0.5864  memory: 1623  loss: 0.4904  loss_cls: 0.2658  loss_bbox: 0.2246
2023/06/09 22:17:08 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:17:14 - mmengine - INFO - Epoch(train)  [89][5/6]  lr: 2.4814e-04  eta: 0:01:28  time: 1.1141  data_time: 0.5895  memory: 1623  loss: 0.4921  loss_cls: 0.2679  loss_bbox: 0.2243
2023/06/09 22:17:15 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:17:21 - mmengine - INFO - Epoch(train)  [90][5/6]  lr: 2.1997e-04  eta: 0:01:20  time: 1.1133  data_time: 0.5876  memory: 1623  loss: 0.4860  loss_cls: 0.2647  loss_bbox: 0.2213
2023/06/09 22:17:22 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:17:22 - mmengine - INFO - Saving checkpoint at 90 epochs
2023/06/09 22:17:27 - mmengine - INFO - Epoch(val)  [90][ 5/13]    eta: 0:00:02  time: 0.3223  data_time: 0.0121  memory: 318  
2023/06/09 22:17:28 - mmengine - INFO - Epoch(val)  [90][10/13]    eta: 0:00:00  time: 0.3222  data_time: 0.0120  memory: 105  
2023/06/09 22:17:29 - mmengine - INFO - Evaluating bbox...
2023/06/09 22:17:29 - mmengine - INFO - bbox_mAP_copypaste: 0.716 0.850 0.803 0.000 0.395 0.845
2023/06/09 22:17:29 - mmengine - INFO - Epoch(val) [90][13/13]    coco/bbox_mAP: 0.7160  coco/bbox_mAP_50: 0.8500  coco/bbox_mAP_75: 0.8030  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.3950  coco/bbox_mAP_l: 0.8450  data_time: 0.0102  time: 0.3171
2023/06/09 22:17:29 - mmengine - INFO - The previous best checkpoint /root/mmdetection/work_dirs/rtmdet_tiny_1xb12-40e_ballon/best_coco_bbox_mAP_epoch_50.pth is removed
2023/06/09 22:17:32 - mmengine - INFO - The best checkpoint with 0.7160 coco/bbox_mAP at 90 epoch is saved to best_coco_bbox_mAP_epoch_90.pth.
2023/06/09 22:17:41 - mmengine - INFO - Epoch(train)  [91][5/6]  lr: 1.9404e-04  eta: 0:01:12  time: 1.1021  data_time: 0.5679  memory: 1623  loss: 0.4672  loss_cls: 0.2508  loss_bbox: 0.2164
2023/06/09 22:17:41 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:17:48 - mmengine - INFO - Epoch(train)  [92][5/6]  lr: 1.7046e-04  eta: 0:01:04  time: 1.1047  data_time: 0.5658  memory: 1623  loss: 0.4769  loss_cls: 0.2592  loss_bbox: 0.2178
2023/06/09 22:17:48 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:17:55 - mmengine - INFO - Epoch(train)  [93][5/6]  lr: 1.4931e-04  eta: 0:00:56  time: 1.1050  data_time: 0.5632  memory: 1623  loss: 0.4690  loss_cls: 0.2553  loss_bbox: 0.2138
2023/06/09 22:17:55 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:18:02 - mmengine - INFO - Epoch(train)  [94][5/6]  lr: 1.3067e-04  eta: 0:00:48  time: 1.1152  data_time: 0.5727  memory: 1623  loss: 0.4621  loss_cls: 0.2534  loss_bbox: 0.2087
2023/06/09 22:18:02 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:18:08 - mmengine - INFO - Epoch(train)  [95][5/6]  lr: 1.1463e-04  eta: 0:00:40  time: 1.1215  data_time: 0.5759  memory: 1623  loss: 0.4519  loss_cls: 0.2455  loss_bbox: 0.2064
2023/06/09 22:18:09 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:18:09 - mmengine - INFO - Switch pipeline now!
2023/06/09 22:18:16 - mmengine - INFO - Epoch(train)  [96][5/6]  lr: 1.0125e-04  eta: 0:00:32  time: 1.1252  data_time: 0.5888  memory: 1623  loss: 0.4362  loss_cls: 0.2373  loss_bbox: 0.1989
2023/06/09 22:18:16 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:18:20 - mmengine - INFO - Epoch(train)  [97][5/6]  lr: 9.0570e-05  eta: 0:00:24  time: 1.0910  data_time: 0.5526  memory: 1623  loss: 0.4190  loss_cls: 0.2280  loss_bbox: 0.1910
2023/06/09 22:18:20 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:18:25 - mmengine - INFO - Epoch(train)  [98][5/6]  lr: 8.2643e-05  eta: 0:00:16  time: 1.0361  data_time: 0.5081  memory: 1623  loss: 0.4159  loss_cls: 0.2288  loss_bbox: 0.1872
2023/06/09 22:18:25 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:18:29 - mmengine - INFO - Epoch(train)  [99][5/6]  lr: 7.7499e-05  eta: 0:00:09  time: 0.9974  data_time: 0.4711  memory: 1623  loss: 0.3896  loss_cls: 0.2135  loss_bbox: 0.1761
2023/06/09 22:18:30 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:18:34 - mmengine - INFO - Epoch(train) [100][5/6]  lr: 7.5156e-05  eta: 0:00:01  time: 0.9458  data_time: 0.4312  memory: 1623  loss: 0.3716  loss_cls: 0.2030  loss_bbox: 0.1686
2023/06/09 22:18:34 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_ballon_20230609_220306
2023/06/09 22:18:34 - mmengine - INFO - Saving checkpoint at 100 epochs
2023/06/09 22:18:39 - mmengine - INFO - Epoch(val) [100][ 5/13]    eta: 0:00:02  time: 0.3215  data_time: 0.0135  memory: 318  
2023/06/09 22:18:40 - mmengine - INFO - Epoch(val) [100][10/13]    eta: 0:00:00  time: 0.3194  data_time: 0.0124  memory: 105  
2023/06/09 22:18:41 - mmengine - INFO - Evaluating bbox...
2023/06/09 22:18:41 - mmengine - INFO - bbox_mAP_copypaste: 0.720 0.850 0.814 0.000 0.382 0.856
2023/06/09 22:18:41 - mmengine - INFO - Epoch(val) [100][13/13]    coco/bbox_mAP: 0.7200  coco/bbox_mAP_50: 0.8500  coco/bbox_mAP_75: 0.8140  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.3820  coco/bbox_mAP_l: 0.8560  data_time: 0.0133  time: 0.3100
2023/06/09 22:18:41 - mmengine - INFO - The previous best checkpoint /root/mmdetection/work_dirs/rtmdet_tiny_1xb12-40e_ballon/best_coco_bbox_mAP_epoch_90.pth is removed
2023/06/09 22:18:44 - mmengine - INFO - The best checkpoint with 0.7200 coco/bbox_mAP at 100 epoch is saved to best_coco_bbox_mAP_epoch_100.pth.
